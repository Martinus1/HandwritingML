
type Profile @aws_iam @aws_api_key {
  id: ID!
  userId: ID!
  createdAt: AWSDateTime!
  data: AWSJSON
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Therapeutics @aws_iam @aws_api_key {
  id: ID!
  userId: ID!
  createdAt: AWSDateTime!
  data: AWSJSON
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Symptoms @aws_iam @aws_api_key {
  id: ID!
  userId: ID!
  createdAt: AWSDateTime!
  data: AWSJSON
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProfileConnection @aws_api_key @aws_iam {
  items: [Profile]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelProfileFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  createdAt: ModelStringInput
  data: ModelStringInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
}

type Query {
  getProfile(id: ID!): Profile @aws_api_key @aws_iam
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection @aws_api_key @aws_iam
  syncProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelProfileConnection @aws_api_key @aws_iam
  getTherapeutics(id: ID!): Therapeutics @aws_api_key @aws_iam
  listTherapeutics(filter: ModelTherapeuticsFilterInput, limit: Int, nextToken: String): ModelTherapeuticsConnection @aws_api_key @aws_iam
  syncTherapeutics(filter: ModelTherapeuticsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTherapeuticsConnection @aws_api_key @aws_iam
  getSymptoms(id: ID!): Symptoms @aws_api_key @aws_iam
  listSymptoms(filter: ModelSymptomsFilterInput, limit: Int, nextToken: String): ModelSymptomsConnection @aws_api_key @aws_iam
  syncSymptoms(filter: ModelSymptomsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSymptomsConnection @aws_api_key @aws_iam
}

input ModelProfileConditionInput {
  userId: ModelIDInput
  createdAt: ModelStringInput
  data: ModelStringInput
  and: [ModelProfileConditionInput]
  or: [ModelProfileConditionInput]
  not: ModelProfileConditionInput
}

input CreateProfileInput {
  id: ID
  userId: ID!
  createdAt: AWSDateTime
  data: AWSJSON
  _version: Int
}

input UpdateProfileInput {
  id: ID!
  userId: ID
  createdAt: AWSDateTime
  data: AWSJSON
  _version: Int
}

input DeleteProfileInput {
  id: ID!
  _version: Int
}

type Mutation {
  createProfile(input: CreateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_api_key @aws_iam
  updateProfile(input: UpdateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_api_key @aws_iam
  deleteProfile(input: DeleteProfileInput!, condition: ModelProfileConditionInput): Profile @aws_api_key @aws_iam
  createTherapeutics(input: CreateTherapeuticsInput!, condition: ModelTherapeuticsConditionInput): Therapeutics @aws_api_key @aws_iam
  updateTherapeutics(input: UpdateTherapeuticsInput!, condition: ModelTherapeuticsConditionInput): Therapeutics @aws_api_key @aws_iam
  deleteTherapeutics(input: DeleteTherapeuticsInput!, condition: ModelTherapeuticsConditionInput): Therapeutics @aws_api_key @aws_iam
  createSymptoms(input: CreateSymptomsInput!, condition: ModelSymptomsConditionInput): Symptoms @aws_api_key @aws_iam
  updateSymptoms(input: UpdateSymptomsInput!, condition: ModelSymptomsConditionInput): Symptoms @aws_api_key @aws_iam
  deleteSymptoms(input: DeleteSymptomsInput!, condition: ModelSymptomsConditionInput): Symptoms @aws_api_key @aws_iam
}

input ModelSubscriptionProfileFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  data: ModelSubscriptionStringInput
  and: [ModelSubscriptionProfileFilterInput]
  or: [ModelSubscriptionProfileFilterInput]
}

type Subscription {
  onCreateProfile: Profile @aws_subscribe(mutations: ["createProfile"]) @aws_api_key @aws_iam
  onUpdateProfile: Profile @aws_subscribe(mutations: ["updateProfile"]) @aws_api_key @aws_iam
  onDeleteProfile: Profile @aws_subscribe(mutations: ["deleteProfile"]) @aws_api_key @aws_iam
  onCreateTherapeutics: Therapeutics @aws_subscribe(mutations: ["createTherapeutics"]) @aws_api_key @aws_iam
  onUpdateTherapeutics: Therapeutics @aws_subscribe(mutations: ["updateTherapeutics"]) @aws_api_key @aws_iam
  onDeleteTherapeutics: Therapeutics @aws_subscribe(mutations: ["deleteTherapeutics"]) @aws_api_key @aws_iam
  onCreateSymptoms: Symptoms @aws_subscribe(mutations: ["createSymptoms"]) @aws_api_key @aws_iam
  onUpdateSymptoms: Symptoms @aws_subscribe(mutations: ["updateSymptoms"]) @aws_api_key @aws_iam
  onDeleteSymptoms: Symptoms @aws_subscribe(mutations: ["deleteSymptoms"]) @aws_api_key @aws_iam
}

type ModelTherapeuticsConnection @aws_api_key @aws_iam {
  items: [Therapeutics]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTherapeuticsFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  createdAt: ModelStringInput
  data: ModelStringInput
  and: [ModelTherapeuticsFilterInput]
  or: [ModelTherapeuticsFilterInput]
  not: ModelTherapeuticsFilterInput
}

input ModelTherapeuticsConditionInput {
  userId: ModelIDInput
  createdAt: ModelStringInput
  data: ModelStringInput
  and: [ModelTherapeuticsConditionInput]
  or: [ModelTherapeuticsConditionInput]
  not: ModelTherapeuticsConditionInput
}

input CreateTherapeuticsInput {
  id: ID
  userId: ID!
  createdAt: AWSDateTime
  data: AWSJSON
  _version: Int
}

input UpdateTherapeuticsInput {
  id: ID!
  userId: ID
  createdAt: AWSDateTime
  data: AWSJSON
  _version: Int
}

input DeleteTherapeuticsInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionTherapeuticsFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  data: ModelSubscriptionStringInput
  and: [ModelSubscriptionTherapeuticsFilterInput]
  or: [ModelSubscriptionTherapeuticsFilterInput]
}

type ModelSymptomsConnection @aws_api_key @aws_iam {
  items: [Symptoms]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSymptomsFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  createdAt: ModelStringInput
  data: ModelStringInput
  and: [ModelSymptomsFilterInput]
  or: [ModelSymptomsFilterInput]
  not: ModelSymptomsFilterInput
}

input ModelSymptomsConditionInput {
  userId: ModelIDInput
  createdAt: ModelStringInput
  data: ModelStringInput
  and: [ModelSymptomsConditionInput]
  or: [ModelSymptomsConditionInput]
  not: ModelSymptomsConditionInput
}

input CreateSymptomsInput {
  id: ID
  userId: ID!
  createdAt: AWSDateTime
  data: AWSJSON
  _version: Int
}

input UpdateSymptomsInput {
  id: ID!
  userId: ID
  createdAt: AWSDateTime
  data: AWSJSON
  _version: Int
}

input DeleteSymptomsInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionSymptomsFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  data: ModelSubscriptionStringInput
  and: [ModelSubscriptionSymptomsFilterInput]
  or: [ModelSubscriptionSymptomsFilterInput]
}

